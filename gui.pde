/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

synchronized public void win_draw1(PApplet appc, GWinData data) { //_CODE_:Controller:961662:
  appc.background(230);
} //_CODE_:Controller:961662:

public void plotnodeclicked(GButton source, GEvent event) { //_CODE_:plotnode:749661:
  nodeclicked = !nodeclicked;
  edgeclicked = false;
  inputclicked = false;
} //_CODE_:plotnode:749661:

public void startnodechanged(GTextField source, GEvent event) { //_CODE_:startnode:959574:
  start = int(startnode.getText());//store the input into the start variable
} //_CODE_:startnode:959574:

public void endnodechanged(GTextField source, GEvent event) { //_CODE_:endnode:898535:
  end = int(endnode.getText());//store the input into the end variable
} //_CODE_:endnode:898535:

public void addedgechanged(GButton source, GEvent event) { //_CODE_:addedge:384321:
  nodeclicked = false;
  edgeclicked = true;
  inputclicked = false;
} //_CODE_:addedge:384321:

public void fromnodechanged(GTextField source, GEvent event) { //_CODE_:fromnode:248187:
  println("fromnode - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:fromnode:248187:

public void tonodechanged(GTextField source, GEvent event) { //_CODE_:tonode:465098:
  println("tonode - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:tonode:465098:

public void readinputchanged(GButton source, GEvent event) { //_CODE_:readinput:902874:
  nodeclicked = false;
  edgeclicked = false;
  inputclicked = true;
} //_CODE_:readinput:902874:

public void rootchanged(GTextField source, GEvent event) { //_CODE_:root:665260:
  rt = int(root.getText());
} //_CODE_:root:665260:

public void destinationchanged(GTextField source, GEvent event) { //_CODE_:destination:712061:
  de = int(destination.getText());
} //_CODE_:destination:712061:

public void dijkstrachanged(GButton source, GEvent event) { //_CODE_:dijkstra:663501:
  dijkstraclicked = true;
} //_CODE_:dijkstra:663501:

public void colorlistchanged(GDropList source, GEvent event) { //_CODE_:colorlist:285608:
  pc = colorlist.getSelectedIndex();
} //_CODE_:colorlist:285608:

public void pathcolorchanged(GTextField source, GEvent event) { //_CODE_:pathcolor:963243:
  println("pathcolor - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:pathcolor:963243:

public void rootnodechanged(GTextField source, GEvent event) { //_CODE_:rootnode:573681:
  println("rootnode - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:rootnode:573681:

public void destinationnodechanged(GTextField source, GEvent event) { //_CODE_:destinationnode:210189:
  println("destinationnode - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:destinationnode:210189:

public void clearchanged(GButton source, GEvent event) { //_CODE_:clear:221967:
  clearclicked = true;
} //_CODE_:clear:221967:

public void randomizedchanged(GButton source, GEvent event) { //_CODE_:randomized:940656:
  nodeclicked = false;
  randomizedclicked = true;
  edgeclicked = false;
  inputclicked = false;
} //_CODE_:randomized:940656:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  Controller = GWindow.getWindow(this, "GUI_Controller", 0, 0, 400, 600, JAVA2D);
  Controller.noLoop();
  Controller.setActionOnClose(G4P.KEEP_OPEN);
  Controller.addDrawHandler(this, "win_draw1");
  plotnode = new GButton(Controller, 30, 30, 80, 30);
  plotnode.setText("Plot Node");
  plotnode.addEventHandler(this, "plotnodeclicked");
  startnode = new GTextField(Controller, 167, 84, 120, 30, G4P.SCROLLBARS_NONE);
  startnode.setOpaque(true);
  startnode.addEventHandler(this, "startnodechanged");
  endnode = new GTextField(Controller, 167, 133, 120, 30, G4P.SCROLLBARS_NONE);
  endnode.setOpaque(true);
  endnode.addEventHandler(this, "endnodechanged");
  addedge = new GButton(Controller, 35, 176, 80, 30);
  addedge.setText("Add Edge");
  addedge.setLocalColorScheme(GCScheme.GOLD_SCHEME);
  addedge.addEventHandler(this, "addedgechanged");
  fromnode = new GTextField(Controller, 32, 85, 120, 30, G4P.SCROLLBARS_NONE);
  fromnode.setText("From Node");
  fromnode.setOpaque(true);
  fromnode.addEventHandler(this, "fromnodechanged");
  tonode = new GTextField(Controller, 35, 132, 120, 30, G4P.SCROLLBARS_NONE);
  tonode.setText("To Node");
  tonode.setOpaque(true);
  tonode.addEventHandler(this, "tonodechanged");
  readinput = new GButton(Controller, 35, 220, 80, 30);
  readinput.setText("Read from file");
  readinput.setLocalColorScheme(GCScheme.RED_SCHEME);
  readinput.addEventHandler(this, "readinputchanged");
  root = new GTextField(Controller, 170, 265, 120, 30, G4P.SCROLLBARS_NONE);
  root.setOpaque(true);
  root.addEventHandler(this, "rootchanged");
  destination = new GTextField(Controller, 171, 314, 120, 30, G4P.SCROLLBARS_NONE);
  destination.setOpaque(true);
  destination.addEventHandler(this, "destinationchanged");
  dijkstra = new GButton(Controller, 36, 365, 80, 30);
  dijkstra.setText("Run Dijkstra");
  dijkstra.setLocalColorScheme(GCScheme.ORANGE_SCHEME);
  dijkstra.addEventHandler(this, "dijkstrachanged");
  colorlist = new GDropList(Controller, 169, 413, 90, 140, 6, 10);
  colorlist.setItems(loadStrings("list_28560"), 0);
  colorlist.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  colorlist.addEventHandler(this, "colorlistchanged");
  pathcolor = new GTextField(Controller, 35, 414, 120, 30, G4P.SCROLLBARS_NONE);
  pathcolor.setText("Path Color");
  pathcolor.setOpaque(true);
  pathcolor.addEventHandler(this, "pathcolorchanged");
  rootnode = new GTextField(Controller, 35, 266, 120, 30, G4P.SCROLLBARS_NONE);
  rootnode.setText("Root Node");
  rootnode.setOpaque(true);
  rootnode.addEventHandler(this, "rootnodechanged");
  destinationnode = new GTextField(Controller, 35, 314, 120, 30, G4P.SCROLLBARS_NONE);
  destinationnode.setText("Destination Node");
  destinationnode.setOpaque(true);
  destinationnode.addEventHandler(this, "destinationnodechanged");
  clear = new GButton(Controller, 35, 461, 80, 30);
  clear.setText("Clear Path");
  clear.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  clear.addEventHandler(this, "clearchanged");
  randomized = new GButton(Controller, 169, 219, 80, 30);
  randomized.setText("Randomize Edges");
  randomized.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  randomized.addEventHandler(this, "randomizedchanged");
  Controller.loop();
}

// Variable declarations 
// autogenerated do not edit
GWindow Controller;
GButton plotnode; 
GTextField startnode; 
GTextField endnode; 
GButton addedge; 
GTextField fromnode; 
GTextField tonode; 
GButton readinput; 
GTextField root; 
GTextField destination; 
GButton dijkstra; 
GDropList colorlist; 
GTextField pathcolor; 
GTextField rootnode; 
GTextField destinationnode; 
GButton clear; 
GButton randomized; 
